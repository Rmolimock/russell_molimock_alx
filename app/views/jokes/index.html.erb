<style style="display: none;">

#set-link, #set-link-m {
  text-decoration: underline;
}

#main-content {
  overflow-y: scroll;
}
#saved-jokes-header {
  text-align: center;
}
#saved-jokes {
  margin-bottom: 3rem;
}
#no-jokes-img {
  max-height: 16vh;
}

.joke-list-item {
  padding: 1rem;
}
.joke-list-content {
  margin-right: 12px;
}

.selected {
  font-weight: bold;
  background-color: #f0f0f0;
}
.btn:target, .btn:active, .btn:focus {
  background-color: #f0f0f0;
}
#set-list li:hover {
  background-color: #f0f0f0;
}
.joke-btn {
  margin-top: 9px;
  width: 100%;
  text-align: center;
  cursor: pointer;
}

#current-set-jokes .btn {
  width: 100%;
  margin-top: 9px;
}

@media only screen and (min-width: 784px) {
  .joke-btn {
    max-width: 100px;
  }
  #current-set-jokes .btn {
    width: initial;
  }
}

.mb-3 {
  margin-bottom: 3rem;
}
#sets-jokes-widget, #sets-jokes-widget > div {
  padding: 3px;
}
#standup-sets {
  padding: 0px 3px 0px 3px;
  margin-top: 3rem;
  overflow: hidden;
}


#set-jokes-container, #my-sets {
  overflow-y: scroll;
}

.unassign-btn {
  color: red;
}
.unassign-btn:hover {
  background-color: whitesmoke;
}
.assign-btn {
  color: green;
}
.assign-btn:hover {
  background-color: whitesmoke;
}

#sets-with-jokes-widget > div {
  margin: 3px;
  border: 1px solid #e0e0e0;
  padding: 3px;
  height: 40vh;
  overflow-y: scroll;
}

#sets-with-jokes-widget ul {
  list-style-type: none;
  width: 100%;
  padding: 9px 0px;
  margin: 0px;
}


#sets-with-jokes-widget ul li, #create-set-form {
  padding: 1.5rem;
  width: 100%;
  min-height: 33px;
  border-bottom: 1px solid #e0e0e0;
}
#create-set-form {
  border: none;
  margin-bottom: 3rem;
}
.set-joke-content {
  padding-right: 12px;
}
</style>

<script style="display: none;">

function createAssignButton(jokeId, content, setId) {
  const btn = document.createElement('button');
  btn.classList.add('btn', 'assign-btn');
  btn.id = jokeId;
  btn.dataset.id = jokeId;
  btn.dataset.content = content;
  btn.dataset.url = `/standup_sets/${setId}/jokes/${jokeId}`;
  btn.innerHTML = 'assign';
  btn.onclick = assignJokeToCurrentSet;
  btn.style.marginTop = '9px';

  return btn;
}


function createUnassignButton(jokeId, content, url) {
  const unassignBtn = document.createElement('button');
  unassignBtn.classList.add('btn', 'unassign-btn', 'unassign-joke');
  unassignBtn.id = jokeId;
  unassignBtn.dataset.id = jokeId;
  unassignBtn.dataset.content = content;
  unassignBtn.dataset.url = url;
  unassignBtn.innerHTML = 'unassign';
  unassignBtn.onclick = removeJokeFromCurrentSet;
  unassignBtn.style.marginTop = '9px';
  return unassignBtn;
}


function getSelectedSetId() {
  const selectedSet = document.querySelector('#set-list .set-item.selected');
  return selectedSet ? selectedSet.dataset.setId : null;
}


function assignJokeToCurrentSet(event) {
  var btn = event.target;
  const jokeId = btn.dataset.id;
  const url = btn.dataset.url;
  const standupSetId = getSelectedSetId();
  if (!standupSetId) {
    console.error('No set is selected.');
    return;
  }
  console.log(`Assigning joke ${jokeId} to set ${standupSetId}...`);

  fetch(url, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-CSRF-Token': getMetaContent('csrf-token')
    },
    credentials: 'same-origin'
  })
    .then(response => {
      if (response.ok) {
        console.log('Joke added to the standup set');
        const currentSetJokes = document.getElementById('current-set-jokes');
        const emptySetMessage = document.getElementById('empty-set');

        if (emptySetMessage) {
          emptySetMessage.remove();
        }
        
        currentSetJokes.innerHTML += `
          <li class="justify-between flip-axis-col">

            <span class="set-joke-content">${btn.dataset.content}</span>

            <button class="btn unassign-btn" id=${jokeId} data-id=${jokeId} data-content="${btn.dataset.content}" data-url=${url} onclick="removeJokeFromCurrentSet(event)">unassign</button>
          </li>`;
          btn.classList.remove('assign-btn');
          btn.classList.remove('assign-joke');
          btn.classList.add('unassign-btn');
          btn.classList.add('unassign-joke');
          btn.innerHTML = 'unassign';
          btn.onclick = removeJokeFromCurrentSet;
      } else {
        console.error('Error adding joke to the standup set');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
}

function removeJokeFromSetList(jokeId) {
        const currentSetJokes = document.getElementById('current-set-jokes');
        if (!jokeId) {
          console.log('deleting all jokes from list')
          console.log(jokeId)
        const setListItems = currentSetJokes.querySelectorAll('li');
        setListItems.forEach(joke => joke.remove());
        currentSetJokes.innerHTML = `<span id="empty-set">This set is empty. Assign some jokes from below!</span>`;
        return;
      }
        const jokeToRemoveContainer = currentSetJokes.querySelector(`[data-id="${jokeId}"]`)
        if (jokeToRemoveContainer) {
          const jokeToRemove = jokeToRemoveContainer.closest('li');
          if (jokeToRemove) {
            jokeToRemove.remove();
          }
        }
        

        if (currentSetJokes.childElementCount === 0) {
          currentSetJokes.innerHTML = `<span id="empty-set">This set is empty. Assign some jokes from below!</span>`;
        }
}

function removeJokeFromCurrentSet(event) {
  const btn = event.target;
  const jokeId = btn.dataset.id;
  
  const standupSetId = getSelectedSetId();
  if (!standupSetId) {
    console.error('No set is selected.');
    return;
  }
  const url = `/standup_sets/${standupSetId}/jokes/${jokeId}`

  console.log(`Removing joke ${jokeId} from set ${standupSetId}...`);

  fetch(url, {
    method: 'DELETE',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-CSRF-Token': getMetaContent('csrf-token')
    },
    credentials: 'same-origin'
  })
    .then(response => {
      if (response.ok) {
        
        removeJokeFromSetList(jokeId);

        btn.classList.remove('unassign-btn');
        btn.classList.remove('unassign-joke');
        btn.classList.add('assign-btn');
        btn.classList.add('assign-joke');
        btn.innerHTML = 'assign';
        btn.onclick = assignJokeToCurrentSet;

        const otherBtn = document.querySelector(`[data-id="${jokeId}"]`);
        if (otherBtn) {
          otherBtn.classList.remove('unassign-btn');
          otherBtn.classList.remove('unassign-joke');
          otherBtn.classList.add('assign-btn');
          otherBtn.classList.add('assign-joke');
          otherBtn.innerHTML = 'assign';
          otherBtn.dataset.url = url;
          otherBtn.dataset.id = jokeId;
          otherBtn.dataset.content = btn.dataset.content;
          console.log(btn.dataset.content)
          otherBtn.onclick = assignJokeToCurrentSet;
        }

      } else {
        console.error('Error removing joke from the standup set');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
}




function createNoJokesScreen() {
  const savedJokesSection = document.getElementById('saved-jokes');
    const noJokesImagePath = savedJokesSection.dataset.noJokesImagePath;
    savedJokesSection.innerHTML = `
      <div class="column w-100 h-100 align-center">
        <image src="${noJokesImagePath}" width=333 height=300>
        <span id="no-saved-jokes" class="w-100 f-large justify-center">Laugh react to jokes and add them to your sets.</span>
        </div>
    `;
}

function handleDeleteJokeClick(event) {
  const span = event.target;
  const url = span.dataset.url;
  const confirmationMessage = span.dataset.confirm;

  if (confirm(confirmationMessage)) {
    fetch(url, {
      method: 'DELETE',
      headers: { 'Accept': 'application/json', 'X-CSRF-Token': getMetaContent('csrf-token') },
      credentials: 'same-origin'
    })
    .then(response => {
      if (response.ok) {
        const jokeLi = span.closest('li');
        jokeLi.remove();
        const jokeId = span.dataset.id;

        console.log(jokeId)
        removeJokeFromSetList(jokeId);

        const remainingJokes = document.querySelectorAll('#joke-list li');
        console.log(remainingJokes);
        if (remainingJokes.length === 0) {
          createNoJokesScreen();
        }
      } else {
        console.error('Error deleting the joke');
      }
    })
    .catch(error => {
      console.error(error);
    });
  }
}



function getMetaContent(name) {
  const element = document.querySelector(`meta[name="${name}"]`);
  return element ? element.content : null;
}

function handleDeleteAllJokesClick(event) {
  if (confirm('Are you sure you want to delete all jokes?')) {
    fetch('/jokes', {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
    })
    .then(response => {
      if (response.ok) {
        createNoJokesScreen();
        removeJokeFromSetList(null);
      } else {
        console.error('Failed to delete all jokes');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }
}






function updateSavedJokesButtons(jokesInSet, setId) {
  const savedJokesLists = document.querySelectorAll('#saved-jokes #joke-list');

  savedJokesLists.forEach(savedJokesList => {
    const savedJokes = savedJokesList.querySelectorAll('li');

    savedJokes.forEach((joke) => {
      const jokeId = joke.querySelector('button').dataset.id;
      const jokeInSet = jokesInSet.find((j) => j.id == jokeId);
      const button = joke.querySelector('button');

      if (jokeInSet) {
        const unassignBtn = createUnassignButton(jokeId, button.dataset.content, button.dataset.url);
        joke.replaceChild(unassignBtn, button);
      } else {
        const assignBtn = createAssignButton(jokeId, button.dataset.content, setId);
        joke.replaceChild(assignBtn, button);
      }
    });
  });
}




document.addEventListener('DOMContentLoaded', () => {
  const setList = document.getElementById('set-list');
  const setItems = setList.querySelectorAll('li');
  let selectedSet = null;

  setItems.forEach((setItem) => {
    setItem.addEventListener('click', () => {
      if (selectedSet) {
        selectedSet.classList.remove('selected');
      } else {
        const initialSelectedSet = document.querySelector('#set-list li.selected');
        if (initialSelectedSet) {
          initialSelectedSet.classList.remove('selected');
        }
      }

      setItem.classList.add('selected');
      selectedSet = setItem;

      const setUrl = setItem.dataset.url;

      fetch(setUrl)
        .then(response => response.json())
        .then(data => {
          console.log('Received data:', data);
          const jokes = Array.isArray(data) ? data : data.jokes;

          const currentSetJokes = document.getElementById('current-set-jokes');

          if (jokes.length === 0) {
            currentSetJokes.innerHTML = `<span id="empty-set">This set is empty. Assign some jokes from below!</span>`;
          } else {
            const jokeItems = jokes.map(joke => `
              <li class="justify-between flip-axis-col">

                <span class="set-joke-content">${joke.content}</span>

                <button class="btn unassign-btn" data-content="${joke.content}" id=${joke.id} data-id=${joke.id} data-url=${joke.url} onclick="removeJokeFromCurrentSet(event)">unassign</button>
              </li>
            `).join('');

            currentSetJokes.innerHTML = jokeItems;
          }

          const setId = setItem.dataset.setId;
          updateSavedJokesButtons(jokes, setId);
        })
        .catch(error => {
          console.error('Error:', error);
        });
    });
  });
});





</script>


<section id="sets-with-jokes-widget" class="card flip-axis-col">
  <div id="sets-and-form-container" class="column w-100 container">
    <ul id="set-list">
        <% if @standup_sets.present? %>
      <% @standup_sets.each do |standup_set| %>
        <% if standup_set == @standup_sets[0] %>
          <li class="set-item selected" data-set-id="<%= standup_set.id %>" data-url="<%= standup_set_path(standup_set) %>">
            <%= standup_set.name.capitalize %>
          </li>
        <% else %>
          <li class="set-item" data-set-id="<%= standup_set.id %>" data-url="<%= standup_set_path(standup_set) %>">
            <%= standup_set.name.capitalize %>
          </li>
          <% end %>
        <% end %>
    <% end %>

    </ul>
    
    <%= form_with(model: StandupSet.new, local: true, html: { id: "create-set-form", class: "rows" }) do |form| %>
      <%= form.text_field :name, placeholder: "Name your set here." %>
      <%= form.submit "Create", class: "btn green lighten-2" %>
    <% end %>
    
    
  </div>

  <div id="set-jokes-container" class="column w-100 container">
    <ul id="current-set-jokes">
      <% if @standup_sets.present? %>
      <% if @standup_sets.first.jokes.present? %>
        <% @standup_sets.each do |standup_set| %>
          <% if standup_set == @standup_sets.first %>
            <% standup_set.jokes.each do |joke| %>
              <li class="justify-between align-center flip-axis-col">
                <span class="set-joke-content"><%= joke.content %></span>
                <button class="btn unassign-btn joke-btn" id=<%= joke.id %> data-id=<%= joke.id %> data-content="<%= joke.content %>" data-url="<%= add_joke_standup_set_path(@standup_sets.first, joke_id: joke.id) %>" onclick="removeJokeFromCurrentSet(event)">unassign</button>
              </li>
            <% end %>
          <% end %>
        <% end %>
      <% else %>
              <span id="empty-set">This set is empty. Assign some jokes from below!</span>
      <% end %>
      <% else %>
        <span id="empty-set">Create your first set. Then add jokes by laugh reacting on the Discover page!</span>
      <% end %>
    </ul>
  </div>
</section>

  




  <section id="saved-jokes" data-no-jokes-image-path="<%= asset_path('no-jokes.gif') %>">
  <% if @jokes.present? %>
    <% @jokes.group_by(&:source).each do |source, jokes| %>
      <span class="f-large bold">My <%= source %> jokes</span>
      <ol id="joke-list" class="w-100 column justify-center card">
        <% jokes.each do |joke| %>
          <li class="w-100 joke-list-item flip-axis-col align-center">

            <span class="joke-list-content w-100">
            <%= joke.content %> 
            </span>
            
            <% if @standup_sets.present? %>
              <% if @standup_sets.first.jokes.include?(joke) %>
              <button class="btn unassign-btn joke-btn" id=<%= joke.id %> data-content="<%= joke.content %>" data-id=<%= joke.id %> data-url="<%= add_joke_standup_set_path(@standup_sets.first, joke_id: joke.id) %>" onclick="removeJokeFromCurrentSet(event)">unassign</button>
              <% else %>
              <button class="btn assign-btn joke-btn" data-id="<%= joke.id %>" data-content="<%= joke.content %>" data-url="<%= add_joke_standup_set_path(@standup_sets.first, joke_id: joke.id) %>" onclick="assignJokeToCurrentSet(event)">assign </button>
              <% end %>
            <% end %>
            <button class="btn red darken-2 joke-btn" data-id="<%= joke.id %>" data-url="<%= joke_path(joke) %>" data-confirm="Are you sure? This can not be undone." onclick="handleDeleteJokeClick(event)">delete</button>
          
          </li>

        <% end %>
      </ol>

  <% end %>
  
  <button class="btn red darken-3" onclick=handleDeleteAllJokesClick(event)>Delete all jokes</button>

 <% else %>
 <div class="column w-100 align-center">
  <image id="no-jokes-img" src="<%= asset_path('no-jokes.gif') %>">
  <span id="no-saved-jokes" class="w-100 justify-center">Your saved jokes will appear here.</span>
  </div>
<% end %>




</section>